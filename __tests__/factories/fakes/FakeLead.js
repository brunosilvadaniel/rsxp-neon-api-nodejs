const faker = require('faker')

const FakeLead = {
  cpf: Math.floor(Math.random() * 100000000000).toString(),
  birthDate: faker.date.past(),
  voterTitle: faker.random.words(),
  receiptIrpf: faker.random.words(),
  yearIrpf: faker.random.number(),
  name: faker.name.findName(),
  namePerson: faker.name.firstName(),
  citizenship: faker.address.country(),
  gender: 'M',
  mother: faker.name.firstName(),
  rgNumber: faker.random.number(),
  rgEmitter: faker.random.words(),
  rgState: faker.address.state(),
  phoneArea: faker.random.number(),
  phone: faker.phone.phoneNumber(),
  email: faker.internet.email(),
  nick: faker.name.findName(),
  shareCapital: faker.random.number(),
  // socialObject: faker.random.words(),
  // inCompany: faker.random.boolean(),
  // inCustomer: faker.random.boolean(),
  // inStreet: faker.random.boolean(),
  // byMachine: faker.random.boolean(),
  // byInternet: faker.random.boolean(),
  // byPostmail: faker.random.boolean(),
  // byPhone: faker.random.boolean(),
  zipCode: faker.address.zipCode(),
  streetType: faker.address.streetPrefix(),
  street: faker.address.streetName(),
  number: faker.random.number(),
  complement: faker.address.secondaryAddress(),
  district: faker.address.streetAddress(),
  cityCode: faker.random.number(),
  city: faker.address.city(),
  stateCode: 'PR',
  // useHomeAddress: faker.random.boolean(),
  zipCodeHome: faker.address.zipCode(),
  streetTypeHome: faker.address.streetPrefix(),
  streetHome: faker.address.streetName(),
  numberHome: faker.random.number(),
  complementHome: faker.address.secondaryAddress(),
  districtHome: faker.address.streetAddress(),
  cityCodeHome: faker.random.number(),
  cityHome: faker.address.city(),
  stateCodeHome: 'PR',
  // situation: faker.random.words(),
  // situationDate: faker.date.past(),
  cnpj: Math.floor(Math.random() * 100000000000).toString(),
  // nire: Math.floor(Math.random() * 100000000000).toString(),
  // receiptMei: faker.random.words(),
  // identifierMei: faker.random.words(),
  // startDate: faker.date.past(),
  // stopDate: faker.date.past(),
  // step: faker.random.number(),
  // status: faker.random.number(),
  // source: faker.random.number(),
  // is_voter_title: faker.random.boolean(),
  // is_receipt_irpf: faker.random.boolean(),
  // missingData: faker.random.boolean(),
  // occupationNote: faker.random.words(),
  removed: 0,
  // supportNote: faker.random.words(),
  // imported: faker.random.boolean(),
  // importedDate: faker.date.past(),
  // hired: faker.random.boolean(),
  // hiredDate: faker.random.boolean(),
  // canceled: faker.random.boolean(),
  // canceledDate: faker.date.past(),
  // openDate: faker.date.past(),
  // blockEmail: faker.random.boolean(),
  // accountBradesco: faker.random.boolean(),
  // sendDas: faker.random.boolean(),
  // mobileArea: faker.random.number(),
  // mobile: faker.phone.phoneNumber(),
  // updateDate: faker.date.past(),
  // password: faker.internet.password(),
}


module.exports = FakeLead
